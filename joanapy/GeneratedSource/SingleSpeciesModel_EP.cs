using System;
using MicrosoftResearch.Infer;
using MicrosoftResearch.Infer.Distributions;
using MicrosoftResearch.Infer.Collections;
using MicrosoftResearch.Infer.Factors;

namespace MicrosoftResearch.Infer.Models.User
{
	/// <summary>
	/// Generated algorithm for performing inference
	/// </summary>
	/// <remarks>
	/// The easiest way to use this class is to wrap an instance in a CompiledAlgorithm object and use
	/// the methods on CompiledAlgorithm to set parameters and execute inference.
	/// 
	/// If you instead wish to use this class directly, you must perform the following steps:
	/// 1) Create an instance of the class
	/// 2) Set the value of any externally-set fields e.g. data, priors
	/// 3) Call the Execute(numberOfIterations) method
	/// 4) Use the XXXMarginal() methods to retrieve posterior marginals for different variables.
	/// 
	/// Generated by Infer.NET 2.5 at 6:15 PM on Thursday, May 2, 2024.
	/// </remarks>
	public partial class SingleSpeciesModel_EP : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		/// <summary>Field backing the nGenes property</summary>
		private int NGenes;
		/// <summary>Field backing the nTerms property</summary>
		private int NTerms;
		/// <summary>Field backing the observed1 property</summary>
		private double[] Observed1;
		/// <summary>Field backing the pInit1 property</summary>
		private double PInit1;
		/// <summary>Field backing the pInit2 property</summary>
		private double PInit2;
		/// <summary>Field backing the assign property</summary>
		private int[] Assign;
		/// <summary>Field backing the assJagged property</summary>
		private int[][] AssJagged;
		/// <summary>Field backing the pUniformProb property</summary>
		private double PUniformProb;
		/// <summary>The number of iterations last computed by Changed_numberOfIterationsDecreased_nTerms_assJagged_nGenes_assign_observed1_pUniformProb_pInit1_pIn0. Set this to zero to force re-execution of Changed_numberOfIterationsDecreased_nTerms_assJagged_nGenes_assign_observed1_pUniformProb_pInit1_pIn0</summary>
		public int Changed_numberOfIterationsDecreased_nTerms_assJagged_nGenes_assign_observed1_pUniformProb_pInit1_pIn0_iterationsDone;
		/// <summary>The number of iterations last computed by Constant. Set this to zero to force re-execution of Constant</summary>
		public int Constant_iterationsDone;
		/// <summary>The number of iterations last computed by Init_numberOfIterationsDecreased_nTerms_assJagged_nGenes_assign_observed1_pUniformProb_pInit1_pInit2. Set this to zero to force re-execution of Init_numberOfIterationsDecreased_nTerms_assJagged_nGenes_assign_observed1_pUniformProb_pInit1_pInit2</summary>
		public int Init_numberOfIterationsDecreased_nTerms_assJagged_nGenes_assign_observed1_pUniformProb_pInit1_pInit2_iterationsDone;
		/// <summary>True if Init_numberOfIterationsDecreased_nTerms_assJagged_nGenes_assign_observed1_pUniformProb_pInit1_pInit2 has performed initialisation. Set this to false to force re-execution of Init_numberOfIterationsDecreased_nTerms_assJagged_nGenes_assign_observed1_pUniformProb_pInit1_pInit2</summary>
		public bool Init_numberOfIterationsDecreased_nTerms_assJagged_nGenes_assign_observed1_pUniformProb_pInit1_pInit2_isInitialised;
		/// <summary>The number of iterations last computed by Changed_nTerms. Set this to zero to force re-execution of Changed_nTerms</summary>
		public int Changed_nTerms_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_nTerms_Init_numberOfIterationsDecreased_assJagged_nGenes_assign_observed1_pUniformProb_pInit4. Set this to zero to force re-execution of Changed_nTerms_Init_numberOfIterationsDecreased_assJagged_nGenes_assign_observed1_pUniformProb_pInit4</summary>
		public int Changed_nTerms_Init_numberOfIterationsDecreased_assJagged_nGenes_assign_observed1_pUniformProb_pInit4_iterationsDone;
		/// <summary>True if Changed_nTerms_Init_numberOfIterationsDecreased_assJagged_nGenes_assign_observed1_pUniformProb_pInit4 has performed initialisation. Set this to false to force re-execution of Changed_nTerms_Init_numberOfIterationsDecreased_assJagged_nGenes_assign_observed1_pUniformProb_pInit4</summary>
		public bool Changed_nTerms_Init_numberOfIterationsDecreased_assJagged_nGenes_assign_observed1_pUniformProb_pInit4_isInitialised;
		/// <summary>The number of iterations last computed by Changed_nGenes. Set this to zero to force re-execution of Changed_nGenes</summary>
		public int Changed_nGenes_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_nGenes_assign. Set this to zero to force re-execution of Changed_nGenes_assign</summary>
		public int Changed_nGenes_assign_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_nGenes_assign_Init_numberOfIterationsDecreased_nTerms_assJagged_observed1_pUniformProb_pInit7. Set this to zero to force re-execution of Changed_nGenes_assign_Init_numberOfIterationsDecreased_nTerms_assJagged_observed1_pUniformProb_pInit7</summary>
		public int Changed_nGenes_assign_Init_numberOfIterationsDecreased_nTerms_assJagged_observed1_pUniformProb_pInit7_iterationsDone;
		/// <summary>True if Changed_nGenes_assign_Init_numberOfIterationsDecreased_nTerms_assJagged_observed1_pUniformProb_pInit7 has performed initialisation. Set this to false to force re-execution of Changed_nGenes_assign_Init_numberOfIterationsDecreased_nTerms_assJagged_observed1_pUniformProb_pInit7</summary>
		public bool Changed_nGenes_assign_Init_numberOfIterationsDecreased_nTerms_assJagged_observed1_pUniformProb_pInit7_isInitialised;
		/// <summary>Message to use of 'pInit'</summary>
		public Beta pInit_use_F;
		/// <summary>Buffer for ReplicateOp_Divide.UsesAverageConditional<Beta></summary>
		public Beta pInit_rep_F_marginal;
		public DistributionStructArray<Beta,double> pInit_rep_B;
		/// <summary>Message to use of 'terms'</summary>
		public DistributionStructArray<Bernoulli,bool> terms_use_F;
		/// <summary>Buffer for JaggedSubarrayOp<bool>.ItemsAverageConditional<DistributionStructArray<Bernoulli,bool>,Bernoulli,DistributionStructArray<Bernoulli,bool>></summary>
		public DistributionStructArray<Bernoulli,bool> terms_use_F_marginal;
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> terms_assJagged_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal<Beta></summary>
		public Beta pInit_rep_B_toDef;
		public DistributionStructArray<Beta,double> observed1_marginal;
		/// <summary>Message to marginal of 'pInit'</summary>
		public Beta pInit_marginal_F;
		/// <summary>Message to marginal of 'terms'</summary>
		public DistributionStructArray<Bernoulli,bool> terms_marginal_F;
		/// <summary>Message to marginal of 'vbool____0'</summary>
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> vbool____0_marginal_F;
		/// <summary>Message to marginal of 'hprot'</summary>
		public DistributionStructArray<Bernoulli,bool> hprot_marginal_F;
		/// <summary>Message to marginal of 'hinactive'</summary>
		public DistributionStructArray<Bernoulli,bool> hinactive_marginal_F;
		#endregion

		#region Properties
		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{			get {
				return this.numberOfIterationsDone;
			}
		}

		/// <summary>The externally-specified value of 'nGenes'</summary>
		public int nGenes
		{			get {
				return this.NGenes;
			}
			set {
				if (this.NGenes!=value) {
					this.NGenes = value;
					this.numberOfIterationsDone = 0;
					this.Changed_nGenes_iterationsDone = 0;
					this.Changed_nGenes_assign_iterationsDone = 0;
					this.Changed_nGenes_assign_Init_numberOfIterationsDecreased_nTerms_assJagged_observed1_pUniformProb_pInit7_iterationsDone = 0;
					this.Changed_nTerms_Init_numberOfIterationsDecreased_assJagged_nGenes_assign_observed1_pUniformProb_pInit4_isInitialised = false;
					this.Init_numberOfIterationsDecreased_nTerms_assJagged_nGenes_assign_observed1_pUniformProb_pInit1_pInit2_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_nTerms_assJagged_nGenes_assign_observed1_pUniformProb_pInit1_pIn0_iterationsDone = 0;
				}
			}
		}

		/// <summary>The externally-specified value of 'nTerms'</summary>
		public int nTerms
		{			get {
				return this.NTerms;
			}
			set {
				if (this.NTerms!=value) {
					this.NTerms = value;
					this.numberOfIterationsDone = 0;
					this.Changed_nGenes_assign_Init_numberOfIterationsDecreased_nTerms_assJagged_observed1_pUniformProb_pInit7_isInitialised = false;
					this.Changed_nTerms_iterationsDone = 0;
					this.Changed_nTerms_Init_numberOfIterationsDecreased_assJagged_nGenes_assign_observed1_pUniformProb_pInit4_iterationsDone = 0;
					this.Init_numberOfIterationsDecreased_nTerms_assJagged_nGenes_assign_observed1_pUniformProb_pInit1_pInit2_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_nTerms_assJagged_nGenes_assign_observed1_pUniformProb_pInit1_pIn0_iterationsDone = 0;
				}
			}
		}

		/// <summary>The externally-specified value of 'observed1'</summary>
		public double[] observed1
		{			get {
				return this.Observed1;
			}
			set {
				if ((value!=null)&&(value.Length!=this.NGenes)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.NGenes)+" was expected for variable \'observed1\'");
				}
				this.Observed1 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_nGenes_assign_Init_numberOfIterationsDecreased_nTerms_assJagged_observed1_pUniformProb_pInit7_isInitialised = false;
				this.Changed_nTerms_Init_numberOfIterationsDecreased_assJagged_nGenes_assign_observed1_pUniformProb_pInit4_isInitialised = false;
				this.Init_numberOfIterationsDecreased_nTerms_assJagged_nGenes_assign_observed1_pUniformProb_pInit1_pInit2_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_nTerms_assJagged_nGenes_assign_observed1_pUniformProb_pInit1_pIn0_iterationsDone = 0;
			}
		}

		/// <summary>The externally-specified value of 'pInit1'</summary>
		public double pInit1
		{			get {
				return this.PInit1;
			}
			set {
				if (this.PInit1!=value) {
					this.PInit1 = value;
					this.numberOfIterationsDone = 0;
					this.Changed_nGenes_assign_Init_numberOfIterationsDecreased_nTerms_assJagged_observed1_pUniformProb_pInit7_isInitialised = false;
					this.Changed_nTerms_Init_numberOfIterationsDecreased_assJagged_nGenes_assign_observed1_pUniformProb_pInit4_isInitialised = false;
					this.Init_numberOfIterationsDecreased_nTerms_assJagged_nGenes_assign_observed1_pUniformProb_pInit1_pInit2_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_nTerms_assJagged_nGenes_assign_observed1_pUniformProb_pInit1_pIn0_iterationsDone = 0;
				}
			}
		}

		/// <summary>The externally-specified value of 'pInit2'</summary>
		public double pInit2
		{			get {
				return this.PInit2;
			}
			set {
				if (this.PInit2!=value) {
					this.PInit2 = value;
					this.numberOfIterationsDone = 0;
					this.Changed_nGenes_assign_Init_numberOfIterationsDecreased_nTerms_assJagged_observed1_pUniformProb_pInit7_isInitialised = false;
					this.Changed_nTerms_Init_numberOfIterationsDecreased_assJagged_nGenes_assign_observed1_pUniformProb_pInit4_isInitialised = false;
					this.Init_numberOfIterationsDecreased_nTerms_assJagged_nGenes_assign_observed1_pUniformProb_pInit1_pInit2_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_nTerms_assJagged_nGenes_assign_observed1_pUniformProb_pInit1_pIn0_iterationsDone = 0;
				}
			}
		}

		/// <summary>The externally-specified value of 'assign'</summary>
		public int[] assign
		{			get {
				return this.Assign;
			}
			set {
				if ((value!=null)&&(value.Length!=this.NGenes)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.NGenes)+" was expected for variable \'assign\'");
				}
				this.Assign = value;
				this.numberOfIterationsDone = 0;
				this.Changed_nGenes_assign_iterationsDone = 0;
				this.Changed_nGenes_assign_Init_numberOfIterationsDecreased_nTerms_assJagged_observed1_pUniformProb_pInit7_iterationsDone = 0;
				this.Changed_nTerms_Init_numberOfIterationsDecreased_assJagged_nGenes_assign_observed1_pUniformProb_pInit4_isInitialised = false;
				this.Init_numberOfIterationsDecreased_nTerms_assJagged_nGenes_assign_observed1_pUniformProb_pInit1_pInit2_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_nTerms_assJagged_nGenes_assign_observed1_pUniformProb_pInit1_pIn0_iterationsDone = 0;
			}
		}

		/// <summary>The externally-specified value of 'assJagged'</summary>
		public int[][] assJagged
		{			get {
				return this.AssJagged;
			}
			set {
				if ((value!=null)&&(value.Length!=this.NGenes)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.NGenes)+" was expected for variable \'assJagged\'");
				}
				this.AssJagged = value;
				this.numberOfIterationsDone = 0;
				this.Changed_nGenes_assign_Init_numberOfIterationsDecreased_nTerms_assJagged_observed1_pUniformProb_pInit7_isInitialised = false;
				this.Changed_nTerms_Init_numberOfIterationsDecreased_assJagged_nGenes_assign_observed1_pUniformProb_pInit4_isInitialised = false;
				this.Init_numberOfIterationsDecreased_nTerms_assJagged_nGenes_assign_observed1_pUniformProb_pInit1_pInit2_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_nTerms_assJagged_nGenes_assign_observed1_pUniformProb_pInit1_pIn0_iterationsDone = 0;
			}
		}

		/// <summary>The externally-specified value of 'pUniformProb'</summary>
		public double pUniformProb
		{			get {
				return this.PUniformProb;
			}
			set {
				if (this.PUniformProb!=value) {
					this.PUniformProb = value;
					this.numberOfIterationsDone = 0;
					this.Changed_nGenes_assign_Init_numberOfIterationsDecreased_nTerms_assJagged_observed1_pUniformProb_pInit7_isInitialised = false;
					this.Changed_nTerms_Init_numberOfIterationsDecreased_assJagged_nGenes_assign_observed1_pUniformProb_pInit4_isInitialised = false;
					this.Init_numberOfIterationsDecreased_nTerms_assJagged_nGenes_assign_observed1_pUniformProb_pInit1_pInit2_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_nTerms_assJagged_nGenes_assign_observed1_pUniformProb_pInit1_pIn0_iterationsDone = 0;
				}
			}
		}

		#endregion

		#region Methods
		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			if (variableName=="nGenes") {
				return this.nGenes;
			}
			if (variableName=="nTerms") {
				return this.nTerms;
			}
			if (variableName=="observed1") {
				return this.observed1;
			}
			if (variableName=="pInit1") {
				return this.pInit1;
			}
			if (variableName=="pInit2") {
				return this.pInit2;
			}
			if (variableName=="assign") {
				return this.assign;
			}
			if (variableName=="assJagged") {
				return this.assJagged;
			}
			if (variableName=="pUniformProb") {
				return this.pUniformProb;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			if (variableName=="nGenes") {
				this.nGenes = (int)value;
				return ;
			}
			if (variableName=="nTerms") {
				this.nTerms = (int)value;
				return ;
			}
			if (variableName=="observed1") {
				this.observed1 = (double[])value;
				return ;
			}
			if (variableName=="pInit1") {
				this.pInit1 = (double)value;
				return ;
			}
			if (variableName=="pInit2") {
				this.pInit2 = (double)value;
				return ;
			}
			if (variableName=="assign") {
				this.assign = (int[])value;
				return ;
			}
			if (variableName=="assJagged") {
				this.assJagged = (int[][])value;
				return ;
			}
			if (variableName=="pUniformProb") {
				this.pUniformProb = (double)value;
				return ;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>The marginal distribution of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object Marginal(string variableName)
		{
			if (variableName=="observed1") {
				return this.Observed1Marginal();
			}
			if (variableName=="terms") {
				return this.TermsMarginal();
			}
			if (variableName=="hprot") {
				return this.HprotMarginal();
			}
			if (variableName=="hinactive") {
				return this.HinactiveMarginal();
			}
			if (variableName=="pInit") {
				return this.PInitMarginal();
			}
			if (variableName=="vbool____0") {
				return this.Vbool____0Marginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>The query-specific marginal distribution of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		/// <summary>The output message of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetOutputMessage(string variableName)
		{
			throw new ArgumentException("This class was not built to compute an output message for "+variableName);
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			if (numberOfIterations<this.Changed_numberOfIterationsDecreased_nTerms_assJagged_nGenes_assign_observed1_pUniformProb_pInit1_pIn0_iterationsDone) {
				this.Changed_nGenes_assign_Init_numberOfIterationsDecreased_nTerms_assJagged_observed1_pUniformProb_pInit7_isInitialised = false;
				this.Changed_nTerms_Init_numberOfIterationsDecreased_assJagged_nGenes_assign_observed1_pUniformProb_pInit4_isInitialised = false;
				this.Init_numberOfIterationsDecreased_nTerms_assJagged_nGenes_assign_observed1_pUniformProb_pInit1_pInit2_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_nTerms_assJagged_nGenes_assign_observed1_pUniformProb_pInit1_pIn0_iterationsDone = 0;
			}
			this.Constant();
			this.Changed_nGenes();
			this.Changed_nGenes_assign();
			this.Changed_nGenes_assign_Init_numberOfIterationsDecreased_nTerms_assJagged_observed1_pUniformProb_pInit7(initialise);
			this.Changed_nTerms();
			this.Changed_nTerms_Init_numberOfIterationsDecreased_assJagged_nGenes_assign_observed1_pUniformProb_pInit4(initialise);
			this.Init_numberOfIterationsDecreased_nTerms_assJagged_nGenes_assign_observed1_pUniformProb_pInit1_pInit2(initialise);
			this.Changed_numberOfIterationsDecreased_nTerms_assJagged_nGenes_assign_observed1_pUniformProb_pInit1_pIn0(numberOfIterations);
			this.numberOfIterationsDone = numberOfIterations;
		}

		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		public void Update(int additionalIterations)
		{
			this.Execute(this.numberOfIterationsDone+additionalIterations, false);
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Computations that do not depend on observed values</summary>
		public void Constant()
		{
			if (this.Constant_iterationsDone==1) {
				return ;
			}
			this.pInit_use_F = ArrayHelper.MakeUniform<Beta>(Beta.Uniform());
			this.Constant_iterationsDone = 1;
			this.Changed_numberOfIterationsDecreased_nTerms_assJagged_nGenes_assign_observed1_pUniformProb_pInit1_pIn0_iterationsDone = 0;
			this.Init_numberOfIterationsDecreased_nTerms_assJagged_nGenes_assign_observed1_pUniformProb_pInit1_pInit2_iterationsDone = 0;
			this.Changed_nTerms_iterationsDone = 0;
			this.Changed_nTerms_Init_numberOfIterationsDecreased_assJagged_nGenes_assign_observed1_pUniformProb_pInit4_iterationsDone = 0;
			this.Changed_nGenes_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of nGenes</summary>
		public void Changed_nGenes()
		{
			if (this.Changed_nGenes_iterationsDone==1) {
				return ;
			}
			// Create array for 'terms_assJagged' Backwards messages.
			this.terms_assJagged_B = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.NGenes);
			this.Changed_nGenes_iterationsDone = 1;
			this.Changed_nGenes_assign_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of nGenes and assign</summary>
		public void Changed_nGenes_assign()
		{
			if (this.Changed_nGenes_assign_iterationsDone==1) {
				return ;
			}
			for(int index1 = 0; index1<this.NGenes; index1++) {
				// Create array for 'terms_assJagged' Backwards messages.
				this.terms_assJagged_B[index1] = new DistributionStructArray<Bernoulli,bool>(this.Assign[index1]);
			}
			this.Changed_nGenes_assign_iterationsDone = 1;
			this.Changed_nGenes_assign_Init_numberOfIterationsDecreased_nTerms_assJagged_observed1_pUniformProb_pInit7_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of nGenes and assign and must reset on changes to numberOfIterationsDecreased and nTerms and assJagged and observed1 and pUniformProb and pInit1 and pInit2</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		public void Changed_nGenes_assign_Init_numberOfIterationsDecreased_nTerms_assJagged_observed1_pUniformProb_pInit7(bool initialise)
		{
			if ((this.Changed_nGenes_assign_Init_numberOfIterationsDecreased_nTerms_assJagged_observed1_pUniformProb_pInit7_iterationsDone==1)&&((!initialise)||this.Changed_nGenes_assign_Init_numberOfIterationsDecreased_nTerms_assJagged_observed1_pUniformProb_pInit7_isInitialised)) {
				return ;
			}
			for(int index1 = 0; index1<this.NGenes; index1++) {
				for(int index2 = 0; index2<this.Assign[index1]; index2++) {
					this.terms_assJagged_B[index1][index2] = ArrayHelper.MakeUniform<Bernoulli>(new Bernoulli());
				}
			}
			this.Changed_nGenes_assign_Init_numberOfIterationsDecreased_nTerms_assJagged_observed1_pUniformProb_pInit7_iterationsDone = 1;
			this.Changed_nGenes_assign_Init_numberOfIterationsDecreased_nTerms_assJagged_observed1_pUniformProb_pInit7_isInitialised = true;
			this.Changed_numberOfIterationsDecreased_nTerms_assJagged_nGenes_assign_observed1_pUniformProb_pInit1_pIn0_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of nTerms</summary>
		public void Changed_nTerms()
		{
			if (this.Changed_nTerms_iterationsDone==1) {
				return ;
			}
			// Create array for 'pInit_rep' Backwards messages.
			this.pInit_rep_B = new DistributionStructArray<Beta,double>(this.NTerms);
			// Create array for 'terms_use' Forwards messages.
			this.terms_use_F = new DistributionStructArray<Bernoulli,bool>(this.NTerms);
			this.Changed_nTerms_iterationsDone = 1;
			this.Changed_nTerms_Init_numberOfIterationsDecreased_assJagged_nGenes_assign_observed1_pUniformProb_pInit4_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of nTerms and must reset on changes to numberOfIterationsDecreased and assJagged and nGenes and assign and observed1 and pUniformProb and pInit1 and pInit2</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		public void Changed_nTerms_Init_numberOfIterationsDecreased_assJagged_nGenes_assign_observed1_pUniformProb_pInit4(bool initialise)
		{
			if ((this.Changed_nTerms_Init_numberOfIterationsDecreased_assJagged_nGenes_assign_observed1_pUniformProb_pInit4_iterationsDone==1)&&((!initialise)||this.Changed_nTerms_Init_numberOfIterationsDecreased_assJagged_nGenes_assign_observed1_pUniformProb_pInit4_isInitialised)) {
				return ;
			}
			for(int index0 = 0; index0<this.NTerms; index0++) {
				this.pInit_rep_B[index0] = ArrayHelper.MakeUniform<Beta>(Beta.Uniform());
				this.terms_use_F[index0] = ArrayHelper.MakeUniform<Bernoulli>(new Bernoulli());
			}
			// Message to 'terms_assJagged' from JaggedSubarray factor
			this.terms_use_F_marginal = JaggedSubarrayOp<bool>.MarginalInit<DistributionStructArray<Bernoulli,bool>>(this.terms_use_F);
			this.Changed_nTerms_Init_numberOfIterationsDecreased_assJagged_nGenes_assign_observed1_pUniformProb_pInit4_iterationsDone = 1;
			this.Changed_nTerms_Init_numberOfIterationsDecreased_assJagged_nGenes_assign_observed1_pUniformProb_pInit4_isInitialised = true;
			this.Changed_numberOfIterationsDecreased_nTerms_assJagged_nGenes_assign_observed1_pUniformProb_pInit1_pIn0_iterationsDone = 0;
		}

		/// <summary>Computations that must reset on changes to numberOfIterationsDecreased and nTerms and assJagged and nGenes and assign and observed1 and pUniformProb and pInit1 and pInit2</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		public void Init_numberOfIterationsDecreased_nTerms_assJagged_nGenes_assign_observed1_pUniformProb_pInit1_pInit2(bool initialise)
		{
			if ((this.Init_numberOfIterationsDecreased_nTerms_assJagged_nGenes_assign_observed1_pUniformProb_pInit1_pInit2_iterationsDone==1)&&((!initialise)||this.Init_numberOfIterationsDecreased_nTerms_assJagged_nGenes_assign_observed1_pUniformProb_pInit1_pInit2_isInitialised)) {
				return ;
			}
			// Message to 'pInit_rep' from Replicate factor
			this.pInit_rep_F_marginal = ReplicateOp_Divide.MarginalInit<Beta>(this.pInit_use_F);
			// Message to 'pInit_rep' from Replicate factor
			this.pInit_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Beta>(this.pInit_use_F);
			this.Init_numberOfIterationsDecreased_nTerms_assJagged_nGenes_assign_observed1_pUniformProb_pInit1_pInit2_iterationsDone = 1;
			this.Init_numberOfIterationsDecreased_nTerms_assJagged_nGenes_assign_observed1_pUniformProb_pInit1_pInit2_isInitialised = true;
			this.Changed_numberOfIterationsDecreased_nTerms_assJagged_nGenes_assign_observed1_pUniformProb_pInit1_pIn0_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and nTerms and assJagged and nGenes and assign and observed1 and pUniformProb and pInit1 and pInit2</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		public void Changed_numberOfIterationsDecreased_nTerms_assJagged_nGenes_assign_observed1_pUniformProb_pInit1_pIn0(int numberOfIterations)
		{
			if (this.Changed_numberOfIterationsDecreased_nTerms_assJagged_nGenes_assign_observed1_pUniformProb_pInit1_pIn0_iterationsDone==numberOfIterations) {
				return ;
			}
			// The constant 'vBeta0'
			Beta vBeta0 = new Beta(0.18697596673752948, 3.0519680594592806);
			this.observed1_marginal = new DistributionStructArray<Beta,double>(this.NGenes, delegate(int index1) {
				return ArrayHelper.MakeUniform<Beta>(vBeta0);
			});
			this.observed1_marginal = Distribution.SetPoint<DistributionStructArray<Beta,double>,double[]>(this.observed1_marginal, this.Observed1);
			DistributionStructArray<Bernoulli,bool> terms_F = default(DistributionStructArray<Bernoulli,bool>);
			DistributionStructArray<Bernoulli,bool> terms_B = default(DistributionStructArray<Bernoulli,bool>);
			// Create array for 'terms' Forwards messages.
			terms_F = new DistributionStructArray<Bernoulli,bool>(this.NTerms);
			// Create array for 'terms' Backwards messages.
			terms_B = new DistributionStructArray<Bernoulli,bool>(this.NTerms);
			for(int index0 = 0; index0<this.NTerms; index0++) {
				terms_B[index0] = ArrayHelper.MakeUniform<Bernoulli>(new Bernoulli());
				terms_F[index0] = ArrayHelper.MakeUniform<Bernoulli>(new Bernoulli());
			}
			DistributionStructArray<Bernoulli,bool> hprot_B = default(DistributionStructArray<Bernoulli,bool>);
			// Create array for 'hprot' Backwards messages.
			hprot_B = new DistributionStructArray<Bernoulli,bool>(this.NGenes);
			for(int index1 = 0; index1<this.NGenes; index1++) {
				hprot_B[index1] = ArrayHelper.MakeUniform<Bernoulli>(new Bernoulli());
			}
			DistributionStructArray<Bernoulli,bool> hinactive_F = default(DistributionStructArray<Bernoulli,bool>);
			// Create array for 'hinactive' Forwards messages.
			hinactive_F = new DistributionStructArray<Bernoulli,bool>(this.NGenes);
			for(int index1 = 0; index1<this.NGenes; index1++) {
				hinactive_F[index1] = ArrayHelper.MakeUniform<Bernoulli>(new Bernoulli());
			}
			Beta pInit_F = ArrayHelper.MakeUniform<Beta>(Beta.Uniform());
			// Message to 'pInit' from Sample factor
			pInit_F = BetaFromTrueAndFalseCountsOp.SampleAverageConditional(this.PInit1, this.PInit2);
			// Message to 'pInit_use' from Variable factor
			this.pInit_use_F = ArrayHelper.SetTo<Beta>(this.pInit_use_F, pInit_F);
			DistributionStructArray<Beta,double> pInit_rep_F = default(DistributionStructArray<Beta,double>);
			// Create array for 'pInit_rep' Forwards messages.
			pInit_rep_F = new DistributionStructArray<Beta,double>(this.NTerms);
			for(int index0 = 0; index0<this.NTerms; index0++) {
				pInit_rep_F[index0] = ArrayHelper.MakeUniform<Beta>(Beta.Uniform());
			}
			DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> terms_assJagged_F = default(DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>);
			// Create array for 'terms_assJagged' Forwards messages.
			terms_assJagged_F = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.NGenes);
			for(int index1 = 0; index1<this.NGenes; index1++) {
				// Create array for 'terms_assJagged' Forwards messages.
				terms_assJagged_F[index1] = new DistributionStructArray<Bernoulli,bool>(this.Assign[index1]);
				for(int index2 = 0; index2<this.Assign[index1]; index2++) {
					terms_assJagged_F[index1][index2] = ArrayHelper.MakeUniform<Bernoulli>(new Bernoulli());
				}
			}
			DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> vbool____0_F = default(DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>);
			// Create array for 'vbool____0' Forwards messages.
			vbool____0_F = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.NGenes);
			for(int index1 = 0; index1<this.NGenes; index1++) {
				// Create array for 'vbool____0' Forwards messages.
				vbool____0_F[index1] = new DistributionStructArray<Bernoulli,bool>(this.Assign[index1]);
				for(int _iv = 0; _iv<this.Assign[index1]; _iv++) {
					vbool____0_F[index1][_iv] = ArrayHelper.MakeUniform<Bernoulli>(new Bernoulli());
				}
			}
			// Message to use of 'vbool____0'
			DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> vbool____0_use_F = default(DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>);
			// Create array for 'vbool____0_use' Forwards messages.
			vbool____0_use_F = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.NGenes);
			for(int index1 = 0; index1<this.NGenes; index1++) {
				// Create array for 'vbool____0_use' Forwards messages.
				vbool____0_use_F[index1] = new DistributionStructArray<Bernoulli,bool>(this.Assign[index1]);
				for(int _iv = 0; _iv<this.Assign[index1]; _iv++) {
					vbool____0_use_F[index1][_iv] = ArrayHelper.MakeUniform<Bernoulli>(new Bernoulli());
				}
			}
			// Create array for replicates of 'hprot_index1__selector_uses_B'
			Bernoulli[][] hprot_index1__selector_uses_B = new Bernoulli[this.NGenes][];
			for(int index1 = 0; index1<this.NGenes; index1++) {
				// Create array for 'hprot_index1__selector_uses' Backwards messages.
				hprot_index1__selector_uses_B[index1] = new Bernoulli[2];
				for(int _ind = 0; _ind<2; _ind++) {
					hprot_index1__selector_uses_B[index1][_ind] = ArrayHelper.MakeUniform<Bernoulli>(new Bernoulli());
				}
			}
			// Create array for replicates of 'hprot_index1__selector_cases_1_B'
			Bernoulli[] hprot_index1__selector_cases_1_B = new Bernoulli[this.NGenes];
			for(int index1 = 0; index1<this.NGenes; index1++) {
				hprot_index1__selector_cases_1_B[index1] = ArrayHelper.MakeUniform<Bernoulli>(new Bernoulli());
				// Message to 'hprot_index1__selector_cases_1' from Random factor
				hprot_index1__selector_cases_1_B[index1] = Bernoulli.FromLogOdds(UnaryOp<double>.LogEvidenceRatio<Beta>(this.Observed1[index1], vBeta0));
			}
			// Create array for replicates of 'hprot_index1__selector_cases_B'
			DistributionStructArray<Bernoulli,bool>[] hprot_index1__selector_cases_B = new DistributionStructArray<Bernoulli,bool>[this.NGenes];
			for(int index1 = 0; index1<this.NGenes; index1++) {
				// Create array for 'hprot_index1__selector_cases' Backwards messages.
				hprot_index1__selector_cases_B[index1] = new DistributionStructArray<Bernoulli,bool>(2);
				for(int _ind0 = 0; _ind0<2; _ind0++) {
					hprot_index1__selector_cases_B[index1][_ind0] = ArrayHelper.MakeUniform<Bernoulli>(new Bernoulli());
				}
				// Message to 'hprot_index1__selector_cases' from Copy factor
				hprot_index1__selector_cases_B[index1][1] = ArrayHelper.SetTo<Bernoulli>(hprot_index1__selector_cases_B[index1][1], hprot_index1__selector_cases_1_B[index1]);
			}
			// Create array for replicates of 'hprot_index1__selector_cases_0_uses_B'
			Bernoulli[][] hprot_index1__selector_cases_0_uses_B = new Bernoulli[this.NGenes][];
			for(int index1 = 0; index1<this.NGenes; index1++) {
				// Create array for 'hprot_index1__selector_cases_0_uses' Backwards messages.
				hprot_index1__selector_cases_0_uses_B[index1] = new Bernoulli[5];
				for(int _ind = 0; _ind<5; _ind++) {
					hprot_index1__selector_cases_0_uses_B[index1][_ind] = ArrayHelper.MakeUniform<Bernoulli>(new Bernoulli());
				}
				// Message to 'hinactive' from Bernoulli factor
				hinactive_F[index1] = BernoulliFromBetaOp.SampleAverageConditional(this.PUniformProb);
			}
			// Message to use of 'hinactive'
			DistributionStructArray<Bernoulli,bool> hinactive_use_F = default(DistributionStructArray<Bernoulli,bool>);
			// Create array for 'hinactive_use' Forwards messages.
			hinactive_use_F = new DistributionStructArray<Bernoulli,bool>(this.NGenes);
			for(int index1 = 0; index1<this.NGenes; index1++) {
				hinactive_use_F[index1] = ArrayHelper.MakeUniform<Bernoulli>(new Bernoulli());
				// Message to 'hinactive_use' from Variable factor
				hinactive_use_F[index1] = ArrayHelper.SetTo<Bernoulli>(hinactive_use_F[index1], hinactive_F[index1]);
			}
			// Create array for replicates of 'hinactive_index1_cond_hprot_index1__F'
			DistributionStructArray<Bernoulli,bool>[] hinactive_index1_cond_hprot_index1__F = new DistributionStructArray<Bernoulli,bool>[this.NGenes];
			for(int index1 = 0; index1<this.NGenes; index1++) {
				// Create array for 'hinactive_index1_cond_hprot_index1_' Forwards messages.
				hinactive_index1_cond_hprot_index1__F[index1] = new DistributionStructArray<Bernoulli,bool>(1);
				for(int _gateind = 0; _gateind<1; _gateind++) {
					hinactive_index1_cond_hprot_index1__F[index1][_gateind] = ArrayHelper.MakeUniform<Bernoulli>(new Bernoulli());
				}
				// Message to 'hinactive_index1_cond_hprot_index1_' from EnterPartial factor
				hinactive_index1_cond_hprot_index1__F[index1] = ArrayHelper.SetAllElementsTo<DistributionStructArray<Bernoulli,bool>,Bernoulli>(hinactive_index1_cond_hprot_index1__F[index1], hinactive_use_F[index1]);
			}
			// Create array for replicates of 'hinactive_index1_cond_hprot_index1__0_F'
			Bernoulli[] hinactive_index1_cond_hprot_index1__0_F = new Bernoulli[this.NGenes];
			for(int index1 = 0; index1<this.NGenes; index1++) {
				hinactive_index1_cond_hprot_index1__0_F[index1] = ArrayHelper.MakeUniform<Bernoulli>(new Bernoulli());
				// Message to 'hinactive_index1_cond_hprot_index1__0' from Copy factor
				hinactive_index1_cond_hprot_index1__0_F[index1] = ArrayHelper.SetTo<Bernoulli>(hinactive_index1_cond_hprot_index1__0_F[index1], hinactive_index1_cond_hprot_index1__F[index1][0]);
			}
			// Create array for replicates of 'hinactive_index1_cond_hprot_index1__0_selector_F'
			Bernoulli[] hinactive_index1_cond_hprot_index1__0_selector_F = new Bernoulli[this.NGenes];
			for(int index1 = 0; index1<this.NGenes; index1++) {
				hinactive_index1_cond_hprot_index1__0_selector_F[index1] = ArrayHelper.MakeUniform<Bernoulli>(new Bernoulli());
				// Message to 'hinactive_index1_cond_hprot_index1__0_selector' from Copy factor
				hinactive_index1_cond_hprot_index1__0_selector_F[index1] = ArrayHelper.SetTo<Bernoulli>(hinactive_index1_cond_hprot_index1__0_selector_F[index1], hinactive_index1_cond_hprot_index1__0_F[index1]);
			}
			// The constant 'vBeta1'
			Beta vBeta1 = new Beta(3.7648805451111675, 0.49043824649899109);
			// Create array for replicates of 'hinactive_index1_cond_hprot_index1__0_selector_cases_0_B'
			Bernoulli[] hinactive_index1_cond_hprot_index1__0_selector_cases_0_B = new Bernoulli[this.NGenes];
			for(int index1 = 0; index1<this.NGenes; index1++) {
				hinactive_index1_cond_hprot_index1__0_selector_cases_0_B[index1] = ArrayHelper.MakeUniform<Bernoulli>(new Bernoulli());
				// Message to 'hinactive_index1_cond_hprot_index1__0_selector_cases_0' from Random factor
				hinactive_index1_cond_hprot_index1__0_selector_cases_0_B[index1] = Bernoulli.FromLogOdds(UnaryOp<double>.LogEvidenceRatio<Beta>(this.Observed1[index1], vBeta1));
			}
			// Create array for replicates of 'hinactive_index1_cond_hprot_index1__0_selector_cases_B'
			DistributionStructArray<Bernoulli,bool>[] hinactive_index1_cond_hprot_index1__0_selector_cases_B = new DistributionStructArray<Bernoulli,bool>[this.NGenes];
			for(int index1 = 0; index1<this.NGenes; index1++) {
				// Create array for 'hinactive_index1_cond_hprot_index1__0_selector_cases' Backwards messages.
				hinactive_index1_cond_hprot_index1__0_selector_cases_B[index1] = new DistributionStructArray<Bernoulli,bool>(2);
				for(int _ind0 = 0; _ind0<2; _ind0++) {
					hinactive_index1_cond_hprot_index1__0_selector_cases_B[index1][_ind0] = ArrayHelper.MakeUniform<Bernoulli>(new Bernoulli());
				}
				// Message to 'hinactive_index1_cond_hprot_index1__0_selector_cases' from Copy factor
				hinactive_index1_cond_hprot_index1__0_selector_cases_B[index1][0] = ArrayHelper.SetTo<Bernoulli>(hinactive_index1_cond_hprot_index1__0_selector_cases_B[index1][0], hinactive_index1_cond_hprot_index1__0_selector_cases_0_B[index1]);
			}
			// The constant 'vBeta2'
			Beta vBeta2 = new Beta(1.1895607133421828, 1.4315078358144184);
			// Create array for replicates of 'hinactive_index1_cond_hprot_index1__0_selector_cases_1_B'
			Bernoulli[] hinactive_index1_cond_hprot_index1__0_selector_cases_1_B = new Bernoulli[this.NGenes];
			for(int index1 = 0; index1<this.NGenes; index1++) {
				hinactive_index1_cond_hprot_index1__0_selector_cases_1_B[index1] = ArrayHelper.MakeUniform<Bernoulli>(new Bernoulli());
				// Message to 'hinactive_index1_cond_hprot_index1__0_selector_cases_1' from Random factor
				hinactive_index1_cond_hprot_index1__0_selector_cases_1_B[index1] = Bernoulli.FromLogOdds(UnaryOp<double>.LogEvidenceRatio<Beta>(this.Observed1[index1], vBeta2));
				// Message to 'hinactive_index1_cond_hprot_index1__0_selector_cases' from Copy factor
				hinactive_index1_cond_hprot_index1__0_selector_cases_B[index1][1] = ArrayHelper.SetTo<Bernoulli>(hinactive_index1_cond_hprot_index1__0_selector_cases_B[index1][1], hinactive_index1_cond_hprot_index1__0_selector_cases_1_B[index1]);
				// Message to 'hprot_index1__selector_cases_0_uses' from Cases factor
				hprot_index1__selector_cases_0_uses_B[index1][4] = Bernoulli.FromLogOdds(CasesOp.LogEvidenceRatio(hinactive_index1_cond_hprot_index1__0_selector_cases_B[index1], hinactive_index1_cond_hprot_index1__0_selector_F[index1]));
			}
			// Create array for replicates of 'hprot_index1__selector_cases_0_B'
			Bernoulli[] hprot_index1__selector_cases_0_B = new Bernoulli[this.NGenes];
			for(int index1 = 0; index1<this.NGenes; index1++) {
				hprot_index1__selector_cases_0_B[index1] = ArrayHelper.MakeUniform<Bernoulli>(new Bernoulli());
				// Message to 'hprot_index1__selector_cases_0' from Replicate factor
				hprot_index1__selector_cases_0_B[index1] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(hprot_index1__selector_cases_0_uses_B[index1], hprot_index1__selector_cases_0_B[index1]);
				// Message to 'hprot_index1__selector_cases' from Copy factor
				hprot_index1__selector_cases_B[index1][0] = ArrayHelper.SetTo<Bernoulli>(hprot_index1__selector_cases_B[index1][0], hprot_index1__selector_cases_0_B[index1]);
				// Message to 'hprot_index1__selector_uses' from Cases factor
				hprot_index1__selector_uses_B[index1][0] = CasesOp.BAverageConditional(hprot_index1__selector_cases_B[index1]);
			}
			// Create array for replicates of 'hprot_index1__selector_F'
			Bernoulli[] hprot_index1__selector_F = new Bernoulli[this.NGenes];
			for(int index1 = 0; index1<this.NGenes; index1++) {
				hprot_index1__selector_F[index1] = ArrayHelper.MakeUniform<Bernoulli>(new Bernoulli());
			}
			// Buffer for ReplicateOp_Divide.Marginal<Bernoulli>
			// Create array for replicates of 'hprot_index1__selector_uses_B_toDef'
			Bernoulli[] hprot_index1__selector_uses_B_toDef = new Bernoulli[this.NGenes];
			for(int index1 = 0; index1<this.NGenes; index1++) {
				// Message to 'hprot_index1__selector_uses' from Replicate factor
				hprot_index1__selector_uses_B_toDef[index1] = ReplicateOp_Divide.ToDefInit<Bernoulli>(hprot_index1__selector_F[index1]);
				// Message to 'hprot_index1__selector_uses' from Replicate factor
				hprot_index1__selector_uses_B_toDef[index1] = ReplicateOp_Divide.ToDef<Bernoulli>(hprot_index1__selector_uses_B[index1], hprot_index1__selector_uses_B_toDef[index1]);
			}
			// Create array for replicates of 'hprot_index1__selector_B'
			Bernoulli[] hprot_index1__selector_B = new Bernoulli[this.NGenes];
			for(int index1 = 0; index1<this.NGenes; index1++) {
				hprot_index1__selector_B[index1] = ArrayHelper.MakeUniform<Bernoulli>(new Bernoulli());
				// Message to 'hprot_index1__selector' from Replicate factor
				hprot_index1__selector_B[index1] = ArrayHelper.SetTo<Bernoulli>(hprot_index1__selector_B[index1], hprot_index1__selector_uses_B_toDef[index1]);
			}
			// Message from use of 'hprot'
			DistributionStructArray<Bernoulli,bool> hprot_use_B = default(DistributionStructArray<Bernoulli,bool>);
			// Create array for 'hprot_use' Backwards messages.
			hprot_use_B = new DistributionStructArray<Bernoulli,bool>(this.NGenes);
			for(int index1 = 0; index1<this.NGenes; index1++) {
				hprot_use_B[index1] = ArrayHelper.MakeUniform<Bernoulli>(new Bernoulli());
				// Message to 'hprot_use' from Copy factor
				hprot_use_B[index1] = ArrayHelper.SetTo<Bernoulli>(hprot_use_B[index1], hprot_index1__selector_B[index1]);
				// Message to 'hprot' from DerivedVariable factor
				hprot_B[index1] = ArrayHelper.SetTo<Bernoulli>(hprot_B[index1], hprot_use_B[index1]);
			}
			// Message from use of 'vbool____0'
			DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> vbool____0_use_B = default(DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>);
			// Create array for 'vbool____0_use' Backwards messages.
			vbool____0_use_B = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.NGenes);
			for(int index1 = 0; index1<this.NGenes; index1++) {
				// Create array for 'vbool____0_use' Backwards messages.
				vbool____0_use_B[index1] = new DistributionStructArray<Bernoulli,bool>(this.Assign[index1]);
				for(int _iv = 0; _iv<this.Assign[index1]; _iv++) {
					vbool____0_use_B[index1][_iv] = ArrayHelper.MakeUniform<Bernoulli>(new Bernoulli());
				}
			}
			DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> vbool____0_B = default(DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>);
			// Create array for 'vbool____0' Backwards messages.
			vbool____0_B = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.NGenes);
			for(int index1 = 0; index1<this.NGenes; index1++) {
				// Create array for 'vbool____0' Backwards messages.
				vbool____0_B[index1] = new DistributionStructArray<Bernoulli,bool>(this.Assign[index1]);
				for(int _iv = 0; _iv<this.Assign[index1]; _iv++) {
					vbool____0_B[index1][_iv] = ArrayHelper.MakeUniform<Bernoulli>(new Bernoulli());
				}
			}
			// Message from use of 'terms'
			DistributionStructArray<Bernoulli,bool> terms_use_B = default(DistributionStructArray<Bernoulli,bool>);
			// Create array for 'terms_use' Backwards messages.
			terms_use_B = new DistributionStructArray<Bernoulli,bool>(this.NTerms);
			for(int index0 = 0; index0<this.NTerms; index0++) {
				terms_use_B[index0] = ArrayHelper.MakeUniform<Bernoulli>(new Bernoulli());
			}
			// Message to 'terms_assJagged' from JaggedSubarray factor
			this.terms_use_F_marginal = JaggedSubarrayOp<bool>.Marginal<DistributionStructArray<Bernoulli,bool>,Bernoulli,object,DistributionStructArray<Bernoulli,bool>>(this.terms_use_F, this.terms_assJagged_B, this.AssJagged, this.terms_use_F_marginal);
			for(int index1 = 0; index1<this.NGenes; index1++) {
				// Message to 'terms_assJagged' from JaggedSubarray factor
				terms_assJagged_F[index1] = JaggedSubarrayOp<bool>.ItemsAverageConditional<DistributionStructArray<Bernoulli,bool>,Bernoulli,DistributionStructArray<Bernoulli,bool>>(this.terms_assJagged_B[index1], this.terms_use_F, this.terms_use_F_marginal, this.AssJagged, index1, terms_assJagged_F[index1]);
				// Message to 'vbool____0' from Copy factor
				vbool____0_F[index1] = ArrayHelper.SetTo<DistributionStructArray<Bernoulli,bool>>(vbool____0_F[index1], terms_assJagged_F[index1]);
				// Message to 'vbool____0_use' from DerivedVariable factor
				vbool____0_use_F[index1] = ArrayHelper.SetTo<DistributionStructArray<Bernoulli,bool>>(vbool____0_use_F[index1], vbool____0_F[index1]);
				// Message to 'vbool____0_use' from AllTrue factor
				vbool____0_use_B[index1] = AllTrueOp.ArrayAverageConditional<DistributionStructArray<Bernoulli,bool>>(hprot_B[index1], vbool____0_use_F[index1], vbool____0_use_B[index1]);
				// Message to 'vbool____0' from DerivedVariable factor
				vbool____0_B[index1] = ArrayHelper.SetTo<DistributionStructArray<Bernoulli,bool>>(vbool____0_B[index1], vbool____0_use_B[index1]);
				// Message to 'terms_assJagged' from Copy factor
				this.terms_assJagged_B[index1] = ArrayHelper.SetTo<DistributionStructArray<Bernoulli,bool>>(this.terms_assJagged_B[index1], vbool____0_B[index1]);
				this.terms_use_F_marginal = JaggedSubarrayOp<bool>.MarginalIncrement<DistributionStructArray<Bernoulli,bool>,Bernoulli,DistributionStructArray<Bernoulli,bool>>(this.terms_use_F_marginal, terms_assJagged_F[index1], this.terms_assJagged_B[index1], this.AssJagged, index1);
			}
			// Message to 'terms_use' from JaggedSubarray factor
			terms_use_B = JaggedSubarrayOp<bool>.ArrayAverageConditional<Bernoulli,DistributionStructArray<Bernoulli,bool>,DistributionStructArray<Bernoulli,bool>>(this.terms_assJagged_B, this.AssJagged, terms_use_B);
			for(int index0 = 0; index0<this.NTerms; index0++) {
				// Message to 'terms' from Variable factor
				terms_B[index0] = ArrayHelper.SetTo<Bernoulli>(terms_B[index0], terms_use_B[index0]);
			}
			// Message to 'pInit_rep' from Replicate factor
			this.pInit_rep_F_marginal = ReplicateOp_Divide.Marginal<Beta>(this.pInit_rep_B_toDef, this.pInit_use_F, this.pInit_rep_F_marginal);
			for(int index0 = 0; index0<this.NTerms; index0++) {
				// Message to 'pInit_rep' from Replicate factor
				pInit_rep_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(this.pInit_rep_B[index0], this.pInit_rep_F_marginal, index0, pInit_rep_F[index0]);
				// Message to 'pInit_rep' from Bernoulli factor
				this.pInit_rep_B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(terms_B[index0], pInit_rep_F[index0]);
				this.pInit_rep_F_marginal = ReplicateOp_Divide.MarginalIncrement<Beta>(this.pInit_rep_F_marginal, pInit_rep_F[index0], this.pInit_rep_B[index0]);
			}
			// Message to 'pInit_rep' from Replicate factor
			this.pInit_rep_B_toDef = ReplicateOp_Divide.ToDef<Beta>(this.pInit_rep_B, this.pInit_rep_B_toDef);
			for(int index0 = 0; index0<this.NTerms; index0++) {
				// Message to 'terms' from Bernoulli factor
				terms_F[index0] = BernoulliFromBetaOp.SampleAverageConditional(pInit_rep_F[index0]);
			}
			for(int iteration = this.Changed_numberOfIterationsDecreased_nTerms_assJagged_nGenes_assign_observed1_pUniformProb_pInit1_pIn0_iterationsDone; iteration<numberOfIterations; iteration++) {
				// Message to 'pInit_rep' from Replicate factor
				this.pInit_rep_F_marginal = ReplicateOp_Divide.Marginal<Beta>(this.pInit_rep_B_toDef, this.pInit_use_F, this.pInit_rep_F_marginal);
				for(int index0 = 0; index0<this.NTerms; index0++) {
					// Message to 'terms_use' from Variable factor
					this.terms_use_F[index0] = ArrayHelper.SetTo<Bernoulli>(this.terms_use_F[index0], terms_F[index0]);
				}
				// Message to 'terms_assJagged' from JaggedSubarray factor
				this.terms_use_F_marginal = JaggedSubarrayOp<bool>.Marginal<DistributionStructArray<Bernoulli,bool>,Bernoulli,object,DistributionStructArray<Bernoulli,bool>>(this.terms_use_F, this.terms_assJagged_B, this.AssJagged, this.terms_use_F_marginal);
				for(int index1 = 0; index1<this.NGenes; index1++) {
					// Message to 'terms_assJagged' from JaggedSubarray factor
					terms_assJagged_F[index1] = JaggedSubarrayOp<bool>.ItemsAverageConditional<DistributionStructArray<Bernoulli,bool>,Bernoulli,DistributionStructArray<Bernoulli,bool>>(this.terms_assJagged_B[index1], this.terms_use_F, this.terms_use_F_marginal, this.AssJagged, index1, terms_assJagged_F[index1]);
					// Message to 'vbool____0' from Copy factor
					vbool____0_F[index1] = ArrayHelper.SetTo<DistributionStructArray<Bernoulli,bool>>(vbool____0_F[index1], terms_assJagged_F[index1]);
					// Message to 'vbool____0_use' from DerivedVariable factor
					vbool____0_use_F[index1] = ArrayHelper.SetTo<DistributionStructArray<Bernoulli,bool>>(vbool____0_use_F[index1], vbool____0_F[index1]);
					// Message to 'vbool____0_use' from AllTrue factor
					vbool____0_use_B[index1] = AllTrueOp.ArrayAverageConditional<DistributionStructArray<Bernoulli,bool>>(hprot_B[index1], vbool____0_use_F[index1], vbool____0_use_B[index1]);
					// Message to 'vbool____0' from DerivedVariable factor
					vbool____0_B[index1] = ArrayHelper.SetTo<DistributionStructArray<Bernoulli,bool>>(vbool____0_B[index1], vbool____0_use_B[index1]);
					// Message to 'terms_assJagged' from Copy factor
					this.terms_assJagged_B[index1] = ArrayHelper.SetTo<DistributionStructArray<Bernoulli,bool>>(this.terms_assJagged_B[index1], vbool____0_B[index1]);
					this.terms_use_F_marginal = JaggedSubarrayOp<bool>.MarginalIncrement<DistributionStructArray<Bernoulli,bool>,Bernoulli,DistributionStructArray<Bernoulli,bool>>(this.terms_use_F_marginal, terms_assJagged_F[index1], this.terms_assJagged_B[index1], this.AssJagged, index1);
				}
				// Message to 'terms_use' from JaggedSubarray factor
				terms_use_B = JaggedSubarrayOp<bool>.ArrayAverageConditional<Bernoulli,DistributionStructArray<Bernoulli,bool>,DistributionStructArray<Bernoulli,bool>>(this.terms_assJagged_B, this.AssJagged, terms_use_B);
				for(int index0 = 0; index0<this.NTerms; index0++) {
					// Message to 'terms' from Variable factor
					terms_B[index0] = ArrayHelper.SetTo<Bernoulli>(terms_B[index0], terms_use_B[index0]);
					// Message to 'pInit_rep' from Replicate factor
					pInit_rep_F[index0] = ReplicateOp_Divide.UsesAverageConditional<Beta>(this.pInit_rep_B[index0], this.pInit_rep_F_marginal, index0, pInit_rep_F[index0]);
					// Message to 'pInit_rep' from Bernoulli factor
					this.pInit_rep_B[index0] = BernoulliFromBetaOp.ProbTrueAverageConditional(terms_B[index0], pInit_rep_F[index0]);
					this.pInit_rep_F_marginal = ReplicateOp_Divide.MarginalIncrement<Beta>(this.pInit_rep_F_marginal, pInit_rep_F[index0], this.pInit_rep_B[index0]);
				}
				// Message to 'pInit_rep' from Replicate factor
				this.pInit_rep_B_toDef = ReplicateOp_Divide.ToDef<Beta>(this.pInit_rep_B, this.pInit_rep_B_toDef);
				for(int index0 = 0; index0<this.NTerms; index0++) {
					// Message to 'terms' from Bernoulli factor
					terms_F[index0] = BernoulliFromBetaOp.SampleAverageConditional(pInit_rep_F[index0]);
				}
				this.OnProgressChanged(new ProgressChangedEventArgs(iteration));
			}
			DistributionStructArray<Bernoulli,bool> hprot_F = default(DistributionStructArray<Bernoulli,bool>);
			// Create array for 'hprot' Forwards messages.
			hprot_F = new DistributionStructArray<Bernoulli,bool>(this.NGenes);
			for(int index1 = 0; index1<this.NGenes; index1++) {
				hprot_F[index1] = ArrayHelper.MakeUniform<Bernoulli>(new Bernoulli());
			}
			this.pInit_marginal_F = ArrayHelper.MakeUniform<Beta>(Beta.Uniform());
			// Message from use of 'pInit'
			Beta pInit_use_B = ArrayHelper.MakeUniform<Beta>(Beta.Uniform());
			// Message to 'pInit_use' from Replicate factor
			pInit_use_B = ArrayHelper.SetTo<Beta>(pInit_use_B, this.pInit_rep_B_toDef);
			// Message to 'pInit_marginal' from Variable factor
			this.pInit_marginal_F = VariableOp.MarginalAverageConditional<Beta>(pInit_use_B, pInit_F, this.pInit_marginal_F);
			// Create array for 'terms_marginal' Forwards messages.
			this.terms_marginal_F = new DistributionStructArray<Bernoulli,bool>(this.NTerms);
			for(int index0 = 0; index0<this.NTerms; index0++) {
				this.terms_marginal_F[index0] = ArrayHelper.MakeUniform<Bernoulli>(new Bernoulli());
				// Message to 'terms_marginal' from Variable factor
				this.terms_marginal_F[index0] = VariableOp.MarginalAverageConditional<Bernoulli>(terms_use_B[index0], terms_F[index0], this.terms_marginal_F[index0]);
			}
			// Create array for 'vbool____0_marginal' Forwards messages.
			this.vbool____0_marginal_F = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.NGenes);
			for(int index1 = 0; index1<this.NGenes; index1++) {
				// Create array for 'vbool____0_marginal' Forwards messages.
				this.vbool____0_marginal_F[index1] = new DistributionStructArray<Bernoulli,bool>(this.Assign[index1]);
				for(int _iv = 0; _iv<this.Assign[index1]; _iv++) {
					this.vbool____0_marginal_F[index1][_iv] = ArrayHelper.MakeUniform<Bernoulli>(new Bernoulli());
				}
				// Message to 'vbool____0_marginal' from DerivedVariable factor
				this.vbool____0_marginal_F[index1] = DerivedVariableOp.MarginalAverageConditional<DistributionStructArray<Bernoulli,bool>>(vbool____0_use_B[index1], vbool____0_F[index1], this.vbool____0_marginal_F[index1]);
			}
			// Create array for 'hprot_marginal' Forwards messages.
			this.hprot_marginal_F = new DistributionStructArray<Bernoulli,bool>(this.NGenes);
			for(int index1 = 0; index1<this.NGenes; index1++) {
				this.hprot_marginal_F[index1] = ArrayHelper.MakeUniform<Bernoulli>(new Bernoulli());
			}
			// Message to use of 'hprot'
			DistributionStructArray<Bernoulli,bool> hprot_use_F = default(DistributionStructArray<Bernoulli,bool>);
			// Create array for 'hprot_use' Forwards messages.
			hprot_use_F = new DistributionStructArray<Bernoulli,bool>(this.NGenes);
			for(int index1 = 0; index1<this.NGenes; index1++) {
				hprot_use_F[index1] = ArrayHelper.MakeUniform<Bernoulli>(new Bernoulli());
				// Message to 'hprot' from AllTrue factor
				hprot_F[index1] = AllTrueOp.AllTrueAverageConditional(vbool____0_use_F[index1]);
				// Message to 'hprot_use' from DerivedVariable factor
				hprot_use_F[index1] = ArrayHelper.SetTo<Bernoulli>(hprot_use_F[index1], hprot_F[index1]);
				// Message to 'hprot_marginal' from DerivedVariable factor
				this.hprot_marginal_F[index1] = DerivedVariableOp.MarginalAverageConditional<Bernoulli>(hprot_use_B[index1], hprot_F[index1], this.hprot_marginal_F[index1]);
			}
			// Create array for 'hinactive_marginal' Forwards messages.
			this.hinactive_marginal_F = new DistributionStructArray<Bernoulli,bool>(this.NGenes);
			for(int index1 = 0; index1<this.NGenes; index1++) {
				this.hinactive_marginal_F[index1] = ArrayHelper.MakeUniform<Bernoulli>(new Bernoulli());
			}
			// Message from use of 'hinactive'
			DistributionStructArray<Bernoulli,bool> hinactive_use_B = default(DistributionStructArray<Bernoulli,bool>);
			// Create array for 'hinactive_use' Backwards messages.
			hinactive_use_B = new DistributionStructArray<Bernoulli,bool>(this.NGenes);
			for(int index1 = 0; index1<this.NGenes; index1++) {
				hinactive_use_B[index1] = ArrayHelper.MakeUniform<Bernoulli>(new Bernoulli());
				// Message to 'hprot_index1__selector' from Copy factor
				hprot_index1__selector_F[index1] = ArrayHelper.SetTo<Bernoulli>(hprot_index1__selector_F[index1], hprot_use_F[index1]);
			}
			// Buffer for ReplicateOp_Divide.UsesAverageConditional<Bernoulli>
			// Create array for replicates of 'hprot_index1__selector_uses_F_marginal'
			Bernoulli[] hprot_index1__selector_uses_F_marginal = new Bernoulli[this.NGenes];
			for(int index1 = 0; index1<this.NGenes; index1++) {
				// Message to 'hprot_index1__selector_uses' from Replicate factor
				hprot_index1__selector_uses_F_marginal[index1] = ReplicateOp_Divide.MarginalInit<Bernoulli>(hprot_index1__selector_F[index1]);
				// Message to 'hprot_index1__selector_uses' from Replicate factor
				hprot_index1__selector_uses_F_marginal[index1] = ReplicateOp_Divide.Marginal<Bernoulli>(hprot_index1__selector_uses_B_toDef[index1], hprot_index1__selector_F[index1], hprot_index1__selector_uses_F_marginal[index1]);
			}
			// Create array for replicates of 'hprot_index1__selector_uses_F'
			Bernoulli[][] hprot_index1__selector_uses_F = new Bernoulli[this.NGenes][];
			for(int index1 = 0; index1<this.NGenes; index1++) {
				// Create array for 'hprot_index1__selector_uses' Forwards messages.
				hprot_index1__selector_uses_F[index1] = new Bernoulli[2];
				for(int _ind = 0; _ind<2; _ind++) {
					hprot_index1__selector_uses_F[index1][_ind] = ArrayHelper.MakeUniform<Bernoulli>(new Bernoulli());
				}
				// Message to 'hprot_index1__selector_uses' from Replicate factor
				hprot_index1__selector_uses_F[index1][1] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(hprot_index1__selector_uses_B[index1][1], hprot_index1__selector_uses_F_marginal[index1], 1, hprot_index1__selector_uses_F[index1][1]);
			}
			// Create array for replicates of 'hinactive_index1_cond_hprot_index1__0_selector_B'
			Bernoulli[] hinactive_index1_cond_hprot_index1__0_selector_B = new Bernoulli[this.NGenes];
			for(int index1 = 0; index1<this.NGenes; index1++) {
				hinactive_index1_cond_hprot_index1__0_selector_B[index1] = ArrayHelper.MakeUniform<Bernoulli>(new Bernoulli());
				// Message to 'hinactive_index1_cond_hprot_index1__0_selector' from Cases factor
				hinactive_index1_cond_hprot_index1__0_selector_B[index1] = CasesOp.BAverageConditional(hinactive_index1_cond_hprot_index1__0_selector_cases_B[index1]);
			}
			// Create array for replicates of 'hinactive_index1_cond_hprot_index1__0_B'
			Bernoulli[] hinactive_index1_cond_hprot_index1__0_B = new Bernoulli[this.NGenes];
			for(int index1 = 0; index1<this.NGenes; index1++) {
				hinactive_index1_cond_hprot_index1__0_B[index1] = ArrayHelper.MakeUniform<Bernoulli>(new Bernoulli());
				// Message to 'hinactive_index1_cond_hprot_index1__0' from Copy factor
				hinactive_index1_cond_hprot_index1__0_B[index1] = ArrayHelper.SetTo<Bernoulli>(hinactive_index1_cond_hprot_index1__0_B[index1], hinactive_index1_cond_hprot_index1__0_selector_B[index1]);
			}
			// Create array for replicates of 'hinactive_index1_cond_hprot_index1__B'
			DistributionStructArray<Bernoulli,bool>[] hinactive_index1_cond_hprot_index1__B = new DistributionStructArray<Bernoulli,bool>[this.NGenes];
			for(int index1 = 0; index1<this.NGenes; index1++) {
				// Create array for 'hinactive_index1_cond_hprot_index1_' Backwards messages.
				hinactive_index1_cond_hprot_index1__B[index1] = new DistributionStructArray<Bernoulli,bool>(1);
				for(int _gateind = 0; _gateind<1; _gateind++) {
					hinactive_index1_cond_hprot_index1__B[index1][_gateind] = ArrayHelper.MakeUniform<Bernoulli>(new Bernoulli());
				}
				// Message to 'hinactive_index1_cond_hprot_index1_' from Copy factor
				hinactive_index1_cond_hprot_index1__B[index1][0] = ArrayHelper.SetTo<Bernoulli>(hinactive_index1_cond_hprot_index1__B[index1][0], hinactive_index1_cond_hprot_index1__0_B[index1]);
				// Message to 'hinactive_use' from EnterPartial factor
				hinactive_use_B[index1] = GateEnterPartialOp<bool>.ValueAverageConditional<Bernoulli>(hinactive_index1_cond_hprot_index1__B[index1], hprot_index1__selector_uses_F[index1][1], hinactive_use_F[index1], new int[1] {0}, hinactive_use_B[index1]);
				// Message to 'hinactive_marginal' from Variable factor
				this.hinactive_marginal_F[index1] = VariableOp.MarginalAverageConditional<Bernoulli>(hinactive_use_B[index1], hinactive_F[index1], this.hinactive_marginal_F[index1]);
			}
			this.Changed_numberOfIterationsDecreased_nTerms_assJagged_nGenes_assign_observed1_pUniformProb_pInit1_pIn0_iterationsDone = numberOfIterations;
		}

		/// <summary>
		/// Returns the marginal distribution for 'observed1' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Beta,double> Observed1Marginal()
		{
			return this.observed1_marginal;
		}

		/// <summary>
		/// Returns the marginal distribution for 'terms' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Bernoulli,bool> TermsMarginal()
		{
			return this.terms_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'hprot' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Bernoulli,bool> HprotMarginal()
		{
			return this.hprot_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'hinactive' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Bernoulli,bool> HinactiveMarginal()
		{
			return this.hinactive_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'pInit' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Beta PInitMarginal()
		{
			return this.pInit_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vbool____0' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> Vbool____0Marginal()
		{
			return this.vbool____0_marginal_F;
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
